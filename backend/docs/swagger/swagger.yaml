basePath: /api/v1
definitions:
  User:
    properties:
      createdAt:
        example: "2025-03-27T10:23:51.495798-05:00"
        format: date-time
        type: string
      department:
        description: "Department\n\t@maxLength\t255\n\t@example\tEngineering"
        example: Engineering
        maxLength: 255
        type: string
      email:
        description: "Email address\n\t@maxLength\t255\n\t@format\t\temail\n\t@example\tjohn.doe@example.com"
        example: john.doe@example.com
        format: email
        maxLength: 255
        type: string
      firstName:
        description: "First name\n\t@minLength\t1\n\t@maxLength\t255\n\t@pattern\t^[\\p{L}\\p{N}]+$\n\t@example\tJohn"
        example: John
        maxLength: 255
        minLength: 1
        type: string
      id:
        example: 1
        type: integer
      lastName:
        description: "Last name\n\t@minLength\t1\n\t@maxLength\t255\n\t@pattern\t^[\\p{L}\\p{N}]+$\n\t@example\tDoe"
        example: Doe
        maxLength: 255
        minLength: 1
        type: string
      updatedAt:
        example: "2025-03-27T10:23:51.495798-05:00"
        format: date-time
        type: string
      userName:
        description: "The username\n\t@minLength\t4\n\t@maxLength\t255\n\t@pattern\t^[a-zA-Z0-9]+$\n\t@example\tjohndoe"
        example: johndoe
        maxLength: 255
        minLength: 4
        type: string
      userStatus:
        allOf:
        - $ref: '#/definitions/UserStatus'
        description: "User Status\n\t@enum\t\tA,I,T\n\t@example\tA"
        enum:
        - A
        - I
        - T
        example: A
    required:
    - email
    - firstName
    - lastName
    - userName
    - userStatus
    type: object
  UserCreateRequest:
    properties:
      department:
        description: "Department\n\t@maxLength\t255\n\t@example\tEngineering"
        example: Engineering
        maxLength: 255
        type: string
      email:
        description: "Email address\n\t@maxLength\t255\n\t@format\t\temail\n\t@example\tjohn.doe@example.com"
        example: john.doe@example.com
        format: email
        maxLength: 255
        type: string
      firstName:
        description: "First name\n\t@minLength\t1\n\t@maxLength\t255\n\t@pattern\t^[\\p{L}\\p{N}]+$\n\t@example\tJohn"
        example: John
        maxLength: 255
        minLength: 1
        type: string
      lastName:
        description: "Last name\n\t@minLength\t1\n\t@maxLength\t255\n\t@pattern\t^[\\p{L}\\p{N}]+$\n\t@example\tDoe"
        example: Doe
        maxLength: 255
        minLength: 1
        type: string
      userName:
        description: "The username\n\t@minLength\t4\n\t@maxLength\t255\n\t@pattern\t^[a-zA-Z0-9]+$\n\t@example\tjohndoe"
        example: johndoe
        maxLength: 255
        minLength: 4
        type: string
      userStatus:
        allOf:
        - $ref: '#/definitions/UserStatus'
        description: "User Status\n\t@enum\t\tA,I,T\n\t@example\tA"
        enum:
        - A
        - I
        - T
        example: A
    required:
    - email
    - firstName
    - lastName
    - userName
    - userStatus
    type: object
  UserStatus:
    enum:
    - A
    - I
    - T
    type: string
    x-enum-varnames:
    - UserStatusActive
    - UserStatusInactive
    - UserStatusTerminated
  UserUpdateRequest:
    properties:
      department:
        description: "Department\n\t@maxLength\t255\n\t@example\tEngineering"
        example: Engineering
        maxLength: 255
        type: string
      email:
        description: "Email address\n\t@maxLength\t255\n\t@format\t\temail\n\t@example\tjohn.doe@example.com"
        example: john.doe@example.com
        format: email
        maxLength: 255
        type: string
      firstName:
        description: "First name\n\t@minLength\t1\n\t@maxLength\t255\n\t@pattern\t^[\\p{L}\\p{N}]+$\n\t@example\tJohn"
        example: John
        maxLength: 255
        minLength: 1
        type: string
      lastName:
        description: "Last name\n\t@minLength\t1\n\t@maxLength\t255\n\t@pattern\t^[\\p{L}\\p{N}]+$\n\t@example\tDoe"
        example: Doe
        maxLength: 255
        minLength: 1
        type: string
      userName:
        description: "The username\n\t@minLength\t4\n\t@maxLength\t255\n\t@pattern\t^[a-zA-Z0-9]+$\n\t@example\tjohndoe"
        example: johndoe
        maxLength: 255
        minLength: 4
        type: string
      userStatus:
        allOf:
        - $ref: '#/definitions/UserStatus'
        description: "User Status\n\t@enum\t\tA,I,T\n\t@example\tA"
        enum:
        - A
        - I
        - T
        example: A
    required:
    - email
    - firstName
    - lastName
    - userName
    - userStatus
    type: object
host: localhost:8080
info:
  contact: {}
  description: A simple user management API
  title: User Management API
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/User'
            type: array
      summary: List all users
    post:
      consumes:
      - application/json
      description: create a new user
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "422":
          description: Unprocessable Entity
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a user
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: delete a user by ID
      parameters:
      - description: User ID (int64)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a user
    get:
      consumes:
      - application/json
      description: get user by ID
      parameters:
      - description: User ID (int64)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a user
    put:
      consumes:
      - application/json
      description: update a user by ID
      parameters:
      - description: User ID (int64)
        in: path
        name: id
        required: true
        type: string
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "422":
          description: Unprocessable Entity
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a user
swagger: "2.0"
